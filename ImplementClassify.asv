% Add folder paths
%path = 'C:/Users/RyanDavidMontoya/Documents/Patterns/ecen5322/Volumes/project/';
path = 'C:\Users\Dylan\Desktop\ECEN 5322 Project\ecen5322\Volumes\project\';
addpath('MelCoef','Markov','Graphs');

% Generate M matrix, and MFCCs
%[M,mfcc,genres] = KullbackAdjacency(path);

% Specify the tree setup
tree1 = ['classical','world'];
tree2{2,1} = ['electronic','jazz_blues','metal_punk','rock_pop'];

%Get the unique genres
g = {'classical','electronic','jazz_blues','metal_punk','rock_pop','world'};

%% Now, get a subset
rm = [5,5,5,5,5,5]; %Let's experiment with a subset of 25 songs, 5 from each genre
R = Remove_Subset( rm, genres, g );

%Now, remove these colums/rows from M
Mt = M;
Mt(:,R) = [];
Mt(R,:) = [];

%set is the list of training songs
set = 1:length(mfcc); %The total length of the set of test items
set(R) = [];

% New covariance, mean array
Gauss = cell(length(mfcc),2);
for i = 1:length(Gauss)
    Gauss{i,1} = cov(mfcc{i}');
    Gauss{i,2} = mean(mfcc{i},2);
end

%% Now, get the clustered bins using spectrum of Lsym
K = 15; %Number of bins, clusters
P = 0; %Cutoff threshold, leave it connected
states = Laplacian(Mt,K,P); %Reduced M matrix, get state space

%% Okay, using the maximum of states, time to create the transition matrices
T = cell(length(g),1);
Tmin = 0.15; %Minimum transition offset

for i = 1:length(g)
    %We need to train the transistion matrix using all of the samples of that genre
    T{i} = zeros(n);
    T{i} = MarkovTrain( T{i}, Tmin, set, genres, mfcc, states, Gauss, g{i} );
    
    display('Next Matrix')
end

save('T.mat','T')

%% FINALLY- Time to classify genre
correct_guess_Markov = zeros(sum(rm),1);
for i = 1:length(R)
    display('True Genre:')
    display(genres{R(i)});
    
    % First test, count the numbers of each similarity
    [genre,P] = gCount(genres,set,I);
    
    % Let's compare it to the transistion matrix implementation
    % Added sets here to get true position
    x = mfcc{R(i)};
    I = mahalanSeq(x,Gauss,set); %Get the Mahalanobis sequence
    specState = states(I);
    est = MarkovEstimate(T,specState);
    [~,ind] = max(est);
    display('Guess_Markov: ')
    display(g{ind})
    fprintf('\n')
    
    % Keep track of accuracy with Markov
    if strcmp(genres(R(i)), g{ind})
        correct_guess_Markov(i) = 1;
    end
end

%% Display accumulated results with Markov
display('Markov Model:')
correct_guess_Markov = mat2cell(correct_guess_Markov, rm);
correct_perc = zeros(1,6);
for i = 1:6
    correct_perc(i) = 100*sum(correct_guess_Markov{i})/rm(i);
    display('   Accuracy Percentage:')
    fprintf('      %s: %3.0f%%\n',g{i},correct_perc(i))
end